<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- AspectJ의 Pointcut 표현식 execution(public void set*(..)) :return type(void) 
		method name(set) paramater(0개 이상)인 메소드 호출 execution(* kr.spring.ch01.*.*(..)) 
		:kr.spring.ch01 패키지의 파라미터가 없는 모든 메소드 호출 execution(* kr.spring.ch01..*.*(..)) 
		:kr.spring.ch01 패키지 및 하위 패키지에 있는 파라미터가 0개 이상인 메소드 호출 execution(Integer kr.spring.ch01..writeService.write()) 
		:리턴 타입이 Integer인 패키지의 클래스의 메소드 execution(* get*(*)) :이름이 get으로 시작하고 1개의 파라미터를 
		갖는 메소드 호출 execution(* get*(*,*)) :이름이 get으로 시작하고 2개의 파라미터를 갖는 메소드 호출 execution(* 
		read*(Integer,..)) :첫번째 파라미터 타입이 Integer이고 1개 이상의 파라미터를 갖는 read 메소드 -->

	<!-- 공통 기능이 구현된 클래스 빈 지정 -->
	<bean id="myFirstAdvice" class="kr.spring.ch19.aop.MyFirstAdvice" />

	<!-- 핵심 기능을 가지고 있는 클래스 빈 지정 -->
	<bean id="product" class="kr.spring.product.Product" />

	<!-- AOP 설정 -->
	<aop:config>
		<!--공통 기능을 가지고 있는 빈 객체를 지정 -->
		<aop:aspect id="aspect" ref="myFirstAdvice">
			<!-- 공통기능을 어느 시점에 적용할지 지정 -->
			<!-- 핵심 기능 검색 -->
			<aop:pointcut
				expression="execution(public String launch())" id="publicMethod" />
			<!-- 공통 기능을 검색된 핵심 기능에 적용 -->
			<!-- <aop:before method="before" pointcut-ref="publicMethod"/> -->
			<!-- <aop:after-returning method="afterReturning" pointcut-ref="publicMethod" returning="msg"/>  -->
			<!-- <aop:after-throwing method="afterThrowing" pointcut-ref="publicMethod" throwing="ex"/> -->
			<!-- <aop:after method="after" pointcut-ref="publicMethod"/> -->
			<aop:around method="around" pointcut-ref="publicMethod"/>	
		</aop:aspect>
	</aop:config>
</beans>





